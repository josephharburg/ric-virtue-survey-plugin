CHANGES FOR PRODUCTION
IN DOWNLOAD Backsups change directory name.
vs_upload_backup change directory name from SERVER[DOCUMENT_ROOT] and add is_dir conditional


V1 -> Here is an overall step by step explanation of the process for storing virtue results and displaying them.

  1. User takes survey.
  2. On Submission =>
    If user is logged in:
      a. Calculate and store results in an object.
      b. Store result object in user meta.
      (See #CALC_INC_DEC below for more info )
      c. Calculate increase and/or decrease of virtues from previous tests.
    If user is not logged in:
      a. Calculate and store results in an object.
      b. Store result object in a transient that lasts a day.
  3. On the results page, use a shortcode to pull either the transient using URL parameters from form submissions or user meta if user is logged in.
    a. If logged in AND there are positive and/or negative results, display them.
  4. Offer a form to register and log in if the user is not logged in; once completed, the user's transient data will be stored in the user's meta information.

V2 -> Here is an overall step by step explanation of the process for storing virtue results and displaying them.

  1. User takes first survey.
  2. After submission the return code is saved in entry.
  3. Upon return for second part of survey, user will enter the return code into a form which will check all the entries to see if there are any matches for that code. The form id of that return code will determine the next survey to be taken and will redirect user to that survey. The return code field and previous form id field is populated based on URL parameters we pass to the redirect URL.
  4. On Submission, the plugin will collect both entries based on return code, combine the form values in one array and then run the result calculation on those values and store results in a transient object with a meta key that has the return code in it.
  3. On the results page, use a shortcode to pull the transient using URL parameters.
    a. If a user comes back to see results again, we will use the form for viewing results again to create a results URL parameter as the code entered in form field.

#CALC_INC_DEC
We collect survey result objects individually with separate meta keys.
Later, we will iterate through all the meta key values to calculate the
increase or decrease of virtue values.

#CALC_INC_FN
Positive results are calculated by comparing the two most recent results.
Based on these results, we can determine if the user has increased any score by more than 3% and return the percentage and the score increase in an array.

#CALC_DEC_FN
Negative results are calculated by comparing the last three results. The
negative number has to be steadily decreasing between 1, 2, and 3. If on
a survey result there is any increase then it does not count as a decreased
virtue.

#VS_RESULT_OBJ
Save the results in a custom object to make it easier to output results in the front end and maintain data integrity.

#VS_STORAGE
Map result numbers to hidden fields on form so we have results in two places for data integrity.

#FIELD_MAPPING
We need this to make sure we know which questions matched which field at the time this was taken in case the form is ever changed in the future.

#MAPPING_FIELDS
This function will take the list of virtues and check the admin label of each question of the form that taken by the user and create an associative array with admin label as key and field id as value.

#NOTE_2
These percentages are more difficult than what I had there. Will have to revist later.

#PUBLIC_CALC_LOOP
This loop takes the form id and entry associative array, iterates through it and gets the form using the GFAPI. Then it maps that form in the current iteration and iterates through the multidimensional array. Which will do the calculation on each value in the current entry associated with that form. It then adds those values to the calculated average in the $calculated_survey_results with the virtue as the key. Then we sort the value by the values.
